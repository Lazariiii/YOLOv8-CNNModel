# Ultralytics YOLO ðŸš€, AGPL-3.0 license
# YOLOv8-cls image classification model. For Usage examples see https://docs.ultralytics.com/tasks/classify

# Parameters
nc: 6 # number of classes
scales: # model compound scaling constants, i.e. 'model=yolov8n-cls.yaml' will call yolov8-cls.yaml with scale 'n'
  # [depth, width, max_channels]
  # n: [0.33, 0.25, 1024]
  # s: [0.33, 0.50, 1024]
    m: [0.67, 0.75, 1024]
  # l: [1.00, 1.00, 1024]
  # x: [1.00, 1.25, 1024]

# YOLOv8.0n backbone with ResNet50
backbone:
  # [from, repeats, module, args]
  - [-1, 1, ResNetLayer, [3, 64, 1, True, 1]]  # 0-P1/2
  - [-1, 1, ResNetLayer, [64, 64, 1, False, 3]]  # 1-P2/4
  - [-1, 1, ResNetLayer, [256, 128, 2, False, 4]]  # 2-P3/8
  - [-1, 1, ResNetLayer, [512, 256, 2, False, 6]]  # 3-P4/16
  - [-1, 1, ResNetLayer, [1024, 512, 2, False, 3]]  # 4-P5/32
  - [-1, 1, SPPF, [1024, 5]]  # 5 | output_size: 512, 20, 20

# YOLOv8.0n head
head:
  # Stage 1
  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]  # 6 | output_size: 512, 40, 40
  - [-1, 1, Conv, [512, 3, 1]]  # 7 | output_size: 512, 40, 40
  - [[-1, 3], 1, Concat, [1]]  # 8 | cat backbone P4
  - [-1, 3, C2f, [256]]  # 9 | output_size: 256, 40, 40

  # Stage 2
  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]  # 10 | output_size: 256, 80, 80
  - [-1, 1, Conv, [256, 3, 1]]  # 11 | output_size: 256, 80, 80
  - [[-1, 2], 1, Concat, [1]]  # 12 | cat backbone P3
  - [-1, 3, C2f, [128]]  # 13 | output_size: 128, 80, 80 (P3/8-small)

  # Stage 3
  - [-1, 1, Conv, [128, 3, 2]]  # 14 | output_size: 128, 40, 40
  - [[-1, 9], 1, Concat, [1]]  # 15 | cat head P4
  - [-1, 3, C2f, [256]]  # 16 | output_size: 256, 40, 40 (P4/16-medium)

  # Stage 4
  - [-1, 1, Conv, [256, 3, 2]]  # 17 | output_size: 256, 20, 20
  - [[-1, 5], 1, Concat, [1]]  # 18 | cat backbone P5
  - [-1, 3, C2f, [512]]  # 19 | output_size: 512, 20, 20 (P5/32-large)

  # Detection
  - [[13, 16, 19], 1, Detect, [nc]]  # 20 | Detect(P3, P4, P5)

